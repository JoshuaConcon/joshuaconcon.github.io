{"version":3,"sources":["components/Container.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bgColour","react_default","a","createElement","className","style","backgroundColor","children","Component","App","src_components_Container","color","href","class","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAoBeA,qBAhBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAUT,EAAMS,UAHDR,wEAQjB,OACES,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaC,MAAO,CAACC,gBAAiBX,KAAKI,MAAMC,WAC9DL,KAAKJ,MAAMgB,iBAXEC,cCkDTC,0LA/CX,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACO,EAAD,CAAWV,SAAS,WAClBC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WAAZ,8BAKJV,EAAAC,EAAAC,cAACO,EAAD,CAAWV,SAAS,WAClBC,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WACVV,EAAAC,EAAAC,cAAA,wEACAF,EAAAC,EAAAC,cAAA,iDAGJF,EAAAC,EAAAC,cAACO,EAAD,CAAWV,SAAS,WAClBC,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WACVV,EAAAC,EAAAC,cAAA,wEACAF,EAAAC,EAAAC,cAAA,mEAGJF,EAAAC,EAAAC,cAACO,EAAD,CAAWV,SAAS,WAClBC,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WACVV,EAAAC,EAAAC,cAAA,4DACAF,EAAAC,EAAAC,cAAA,2DAGJF,EAAAC,EAAAC,cAACO,EAAD,CAAWV,SAAS,WAClBC,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WACVV,EAAAC,EAAAC,cAAA,uFACAF,EAAAC,EAAAC,cAAA,oHACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WAAUV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,yCAAwCX,EAAAC,EAAAC,cAAA,KAAGU,MAAM,4BADjF,OAEEZ,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WAAUV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,wCAAuCX,EAAAC,EAAAC,cAAA,KAAGU,MAAM,4BAFhF,OAGEZ,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WAAUV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,mCAAkCX,EAAAC,EAAAC,cAAA,KAAGU,MAAM,iCAH3E,OAIEZ,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WAAUV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,iEAAgEX,EAAAC,EAAAC,cAAA,KAAGU,MAAM,4BAJzG,OAKEZ,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WAAUV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,sCAAqCX,EAAAC,EAAAC,cAAA,KAAGU,MAAM,6BAL9E,OAMEZ,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WAAUV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,qCAAoCX,EAAAC,EAAAC,cAAA,KAAGU,MAAM,mCAC3EZ,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,WAAUV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,qCAAoCX,EAAAC,EAAAC,cAAA,KAAGU,MAAM,6CAxCvEL,cCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d4085a07.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Container.css';\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgColour: props.bgColour\n    };\n  };\n\n  render() {\n    return (\n      <header className=\"App-header\" style={{backgroundColor: this.state.bgColour}}>\n          {this.props.children}\n      </header>\n    );\n  }\n}\n\nexport default Container;","import React, { Component } from 'react';\nimport Container from './components/Container';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Container bgColour=\"#291C7B\">\n          <h2>\n            <font color=\"#E6FFC5\">\n              Howdy, I'm Joshua Concon\n            </font>\n          </h2>\n        </Container>\n        <Container bgColour=\"#E6FFC5\">\n          <font color=\"#291C7B\">\n            <h3>I'm studying Computer Science at the University of Toronto</h3>\n            <p>(planning to graduate on Nov 2020)</p>\n          </font>\n        </Container>\n        <Container bgColour=\"#291C7B\">\n          <font color=\"#E8AA3C\">\n            <h3>Did backend development at A4Media (an Altice USA company)</h3>\n            <h4>preparing their new advertising platform for launch</h4>\n          </font>\n        </Container>\n        <Container bgColour=\"#FF4F6A\">\n          <font color=\"#291C7B\">\n            <h3>Also did an year-long internship at scotiabank</h3>\n            <h4>building upon their risk management systems</h4>\n          </font>\n        </Container>\n        <Container bgColour=\"#291C7B\">\n          <font color=\"#FF4F6A\">\n            <h3>Status: Looking for full-time new graduate positions starting in Sep 2020</h3>\n            <h4>open to offers in Toronto, New York City and San Francisco Bay Area (will require sponsorship for USA)</h4>\n            <p>\n              <span color=\"#FF4F6A\"><a href=\"mailto:joshua.concon@mail.utoronto.ca\"><i class=\"far fa-envelope fa-lg\"></i></a></span>&nbsp;\n              <span color=\"#FF4F6A\"><a href=\"https://linkedin.com/in/joshuaconcon\"><i class=\"fab fa-linkedin fa-lg\"></i></a></span>&nbsp;\n              <span color=\"#FF4F6A\"><a href=\"https://github.com/JoshuaConcon\"><i class=\"fab fa-github-square fa-lg\"></i></a></span>&nbsp;\n              <span color=\"#FF4F6A\"><a href=\"https://github.com/JoshuaConcon/resume/blob/master/resume.pdf\"><i class=\"far fa-file-alt fa-lg\"></i></a></span>&nbsp;\n              <span color=\"#FF4F6A\"><a href=\"https://instagram.com/joshuaconcon\"><i class=\"fab fa-instagram fa-lg\"></i></a></span>&nbsp;\n              <span color=\"#FF4F6A\"><a href=\"https://facebook.com/joshuaconcon\"><i class=\"fab fa-facebook-square fa-lg\"></i></a></span>\n              <span color=\"#FF4F6A\"><a href=\"https://twitter.com/Joshua_Concon\"><i class=\"fab fa-twitter-square fa-lg\"></i></a></span>\n            </p>\n          </font>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}